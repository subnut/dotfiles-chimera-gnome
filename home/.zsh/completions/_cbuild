#compdef cbuild

builtin local -a pkgs
builtin local -a archs
builtin local -a flags
builtin local -a commands

builtin local cports
cports=${~${words[1]%/cbuild}}
pkgs=( ${$(cd $cports; ls */*/template.py;)%/template.py} )
archs=( ${${$(cd $cports; ls etc/build_profiles/*.ini;)##*/}%.ini} )

builtin local _arch="architecture:($archs)"
builtin local _dirs="directory:_files -/"

flags=( # copied from cbuild --help output
	'(-h --help)'{-h,--help}'[Show this help message and exit]'
	'(-f --force)'{-f,--force}'[Force writing a package even when it exists and template is older]'
	'(-L --no-color)'{-L,--no-color}'[Force plain output]'
	'(-C --skip-check)'{-C,--skip-check}'[Skip running the check stage]'
	'(-X --check-fail)'{-X,--check-fail}'[Do not abort build if check fails]'
	'(-G --no-dbg)'{-G,--no-dbg}'[Do not build debug packages]'
	'(-t --temporary)'{-t,--temporary}'[Use a temporary build root]'
	'(-N --no-remote)'{-N,--no-remote}'[Do not ever use remote repositories]'
	'(-D --dirty-build)'{-D,--dirty-build}'[Skip installing (and removing) dependencies]'
	'(-K --keep-temporary)'{-K,--keep-temporary}'[Keep temporary files and build dependencies after build]'
	'(-c --config)'{-c+,--config=}'[The configuration file to use]':'file':_files
	'(-j --jobs)'{-j+,--jobs=}'[Number of jobs to use]':'number of jobs':' '
	'(-a --arch)'{-a+,--arch=}'[Target architecture to build for]':$_arch
	'(-A --host-arch)'{-A+,--host-arch=}'[Initial host architecture]':$_arch
	'(-b --build-root)'{-b+,--build-root=}'[The build root path]':$_dirs
	'(-B --build-dir)'{-B+,--build-dir=}'[The path for build/destdir]':$_dirs
	'(-r --repository-path)'{-r+,--repository-path=}'[Local repository path]':$_dirs
	'(-R --alt-repository)'{-R+,--alt-repository=}'[Alternative repository to use]':$_dirs
	'(-s --sources-path)'{-s+,--sources-path=}'[Sources storage path]':$_dirs
	'(--allow-unsigned)--allow-unsigned[Allow building without a signing key]'
	'(--stage)--stage[Keep built packages staged]'
	'(--stage-path)--stage-path=[Root path for staged packages]'
	'(--dry-run)--dry-run[Do not perform changes to file system (only some commands)]'
	'(--status-fd)--status-fd=[File descriptor for bulk build status (must be open)]'
	'(--bulk-continue)--bulk-continue[Try building the remaining packages in case of bulk failures]'
	'(--update-check)--update-check[Perform a update-check before fetching sources]'
	'(--accept-checksums)--accept-checksums[Accept mismatched checksums when fetching]'
)

# cat src/runner.py | grep case | sed 's/^.*case //;s/"//g;s/://g;s/|//g'
# Messages taken from Usage.md
commands=(
	binary-bootstrap'\:"Create build root from local packages"'
	bootstrap'\:"Bootstrap from source"'
	bootstrap-update'\:"Update build root packages"'
	keygen'\:"Generate signing key"'
	chroot'\:"Enter build root with interactive shell"'
	clean'\:"Cleanup build root"'
	remove-autodeps'\:"Remove automatically installed pkgs from build root"'
	prune-obsolete'\:"Prune obsolete packages within all repos for current architecture"'
	prune-removed'\:"Prune removed packages within all repos for current architecture"'
	prune-pkgs'\:"Run prune-obsolete followed by prune-removed"'
	prune-sources
	relink-subpkgs'\:"Recreate or prune subpackage symlinks"'
	index'\:"Reindex a repository / all repositories"'
	zap'\:"Remove build root"'
	lint'\:"Lint package template"'
	cycle-check'\:"Scan for build-time dependency cycle"'
	update-check
	dump
	print-build-graph
	print-unbuilt
	list-unbuilt
	fetch  extract  prepare
	patch  configure  build
	check  install  pkg
	unstage'\:"Unstage repository"'
	unstage-check-remote'\:"Check if local pkgs would unstage cleanly in remote repo"'
	bulk-pkg
	bulk-print
	bulk-raw
	prepare-upgrade
	bump-pkgrel
)

# See Usage.md
case "$words[$CURRENT-1]" in
	(fetch|extract|prepare);&
	(patch|configure|build);&
	(check|install|pkg);&
	(lint|cycle-check)
		_arguments -s -S "2:packages:($pkgs)"
		return;;
	(relink-subpkgs)
		_arguments -s -S "2:arguments:(prune $pkgs)"
		return;;
esac


_arguments -s -S $flags \
	"1:commands:(($commands))"
